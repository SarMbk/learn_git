/* Internally git uses:
 * Commit object = text file containing:
 * 	commit user info
 * 	commit message
 *	reference to commit's parent
 *	reference to the root tree of the project
 * Annotated tag = reference to a specific commit
 * Tree = object containing a list of filenames and directories inside of a directory
 * Blob = object that stores the content of a file that is being managed by git
 * 
 * Git ID is a name of a git object (40 char hexadecimal string) that is obtained by hashing the contents of objects using
 * Secure Hashing Algorithm 1.Therefore Git ID is also called the SHA-1 value.
 */


// make directory
mkdir directoryName


//change current user directory
cd directoryName


//begin managing project with git
git init


//see all files in current directory
ls


//clear terminal
clear


//Verify that your local repo directory contains a .git directory
ls -a
// output should be 
.				.git
..				git & terminal cheatsheet
.DS_Store


//to view status of files in your folder
git status


//to add a file that you copied into the folder to be tracked
git add filename


// to create a new file right in the command line
touch filename.txt     //or it can be touch filename.cpp or .java or any


//to track all files in the directory just type
// e.g. if im in folder learn_git and I want to track all files in that folder i just type
git add .


// to stop tracking a file in a local repo
git rm filename


// to add a subfolder to be tracked
git add subfolderName


// to remove subfolder from tracking and all that's in it
git rm -r subfolderName


// You don't use it often but you can create a git id for an object using the command below. This is a low-level aka "plumbing" command.
git hash-object <filename> 


// to commit with a short message
git commit -m "commit message"


// see the commit history
git log 			// this will return 40 character Git IDs
git log --oneline 		// this will return 7 character git IDs
git log --oneline --graph 	// this will return 7 character git IDs with a treelike look
git log --oneline -2		// this will return short IDs and only 2 most recent commits


// to hang your repo up on the cloud
// if you started only with a local repo, first provide information on where the remote repository is
// in this case "origin" is an alias we gave to the remote repo. It can be any name (i.e. origin is not a git keyword but just a repo name)
git remote add origin https://github.com/SarMbk/learn_git.git
// then push your commits to the remote repo that you just specified
git push [-u] [remote repo alias or url] [branch name] // -u means upstream, origin is a repo alias, master is the branch we are syncing to
git push -u origin master
// then enter username and pwd


// clone(copy) info from a remote repo (cloud) to a local repo
// 1. navigate to the directory where you want the local repo to be e.g.
cd myRepos
// 2. use git clone command e.g.
git clone https://github.com/SarMbk/learn_git.git


// display information about your remote repository. This will show what repo you fetch from and what repo you push to
// git remote --verbose same as git remote -v same as git remote --v
git remote -v


// add a readme file to the remote repo
echo "# Project readme" >> readme.md


// thus to clone a repo, work on it and then commit you use the following commands
cd myRepos
git clone https://github.com/SarMbk/learn_git.git
git commit -m "commit message"
git push -u origin master 


// if you already have a local repo but no remote repo, this is what you do
cd myRepos
git remote add origin https://github.com/SarMbk/learn_git.git   //origin is just the repo alias
git commit -m "commit message"
git push -u origin master 


// Show info about a specific commit
git show <reference>


// master = default name of main branch in a repo.
git show head 	// will show commit info for the most recent commit
git show head~	// will show
git show head~1	// will show info for previous commit
git show head~4	// will show info for 4th previous commit, same as git show head~~~~


// ^ character is used for showing parents in merge commits
git show head^ 	// will show first parent of the most current commit
git show head^^ // will show first parent's first parent, if they are all on one
		// branch, first parents stay on same branch
git show head^2 // will show second parent of the most current commit
		// it will return an error if the most current commit is not
		// a result of a merge. note git show head^2 != git show head^^
		// git show head^2 shows second parent
		// git show head^^ shows first parent's first parentclea


// to tag the current commit:
git tag v1.0	// v1.0 is the tagname


// to tag a commit with an annotated tag; if you dont specify a commit
// it will tag the current commit
git tag -a -m "put comments here" v1 [optional: specify a commit SHA1]


// git push alone does not transer tags to a remote location
git push <remote> <tagname>	// transfers an individual tag
git push <remote> --tags	// transfers all tags


// delete local tag v1
git tag -d v1


// see list of branches
git branch


// create a branch
git branch branchName	// only creates a branch, does not update head


// to change what head to the newly created branch use:
git checkout branchName

// to go back to a specific commit
git checkout <commit SHA1>


// to create and switch to (checkout) a branch in one line:
git checkout -b branchName


// to delete a branch
git branch -d branchName


// get local list of head commits
git reflog


// show all branches in a log
git log --oneline --graph --all


// 4 types of merges: fast-forward; merge commit; squash merge; rebase
// Fast forward merge:

before: 
    B - C
  /
A

after:
A - B - C

// FF merge only possible when no commits were made to the master branch after
// the topic branch was created. I.e. FF merge not possible in the following situation (git will not allow an FF merge):
    B - C
  /
A - D 


// Steps for an FF merge
git checkout master
git merge topicBranchName
git branch -d topicBranchName

// Continue next time on wk2 merging 6:00


// Merge Commit (merge conflicts will be discussed later):
    B - C
  /       \ 
A - D - E - F

// F will have changes of both C and E
// Steps for merge commit:
git checkout master
git merge featureX	// if merge is not fast-forwardable, it will auto attempt
git branch -d featureX	// to perform a merge commit




